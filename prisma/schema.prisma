generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model accounts {
  id                Int     @id @default(autoincrement())
  userId            Int
  type              String  @db.VarChar(255)
  provider          String  @db.VarChar(255)
  providerAccountId String  @db.VarChar(255)
  refresh_token     String?
  access_token      String?
  expires_at        BigInt?
  id_token          String?
  scope             String?
  session_state     String?
  token_type        String?
}

model company {
  id              Int               @id @default(autoincrement())
  email           String            @unique(map: "ik_companies_email")
  name            String
  avatar          String?
  company_profile company_profile[]
  post            post[]
}

model company_profile {
  id          Int     @id @default(autoincrement())
  company_id  Int
  name        String
  description String
  website     String
  company     company @relation(fields: [company_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_company_id")
}

model company_user {
  id      Int   @id @default(autoincrement())
  user_id Int
  users   users @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_user_id")
}

model competition {
  id          Int      @id @default(autoincrement())
  name        String
  description String
  start_date  DateTime @db.Date
  end_date    DateTime @db.Date
  avatar      String?
}

model competition_application {
  id          Int      @id @default(autoincrement())
  name        String
  description String
  start_date  DateTime @db.Date
  end_date    DateTime @db.Date
  avatar      String?
}

model post {
  id         Int         @id @default(autoincrement())
  created_at DateTime    @default(now()) @db.Timestamp(6)
  content    String
  user_id    Int
  company_id Int?
  likes      Int?        @default(0)
  company    company?    @relation(fields: [company_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_company_id")
  users      users       @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_user_id")
  post_like  post_like[]
}

model post_like {
  user_id Int
  post_id Int
  post    post  @relation(fields: [post_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_post_id")
  users   users @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_user_id")

  @@id([user_id, post_id])
}

model project_genre {
  id                   Int                    @id @default(autoincrement())
  genre_name           String                 @unique
  project_projectgenre project_projectgenre[]
}

model project_projectgenre {
  project_id           Int
  project_genre_id     Int
  project_genre        project_genre?       @relation(fields: [project_genre_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_genre_id")
  user_profile_project user_profile_project @relation(fields: [project_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_project_id")

  @@id([project_id, project_genre_id])
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model project_projecttag {
  project_id           Int
  project_tag_id       Int
  user_profile_project user_profile_project @relation(fields: [project_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_project_id")
  project_tag          project_tag?         @relation(fields: [project_tag_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_tag_id")

  @@id([project_id, project_tag_id])
}

model project_tag {
  id                 Int                  @id @default(autoincrement())
  tag_name           String               @unique
  project_projecttag project_projecttag[]
}

model sessions {
  id           Int      @id @default(autoincrement())
  userId       Int
  expires      DateTime @db.Timestamptz(6)
  sessionToken String   @db.VarChar(255)
}

model user_profile {
  id                      Int                       @id @default(autoincrement())
  contact_email           String?
  about                   String?
  current_title           String?
  user_id                 Int
  background_image        String?
  users                   users                     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_user_id")
  user_profile_experience user_profile_experience[]
  user_profile_project    user_profile_project[]
}

model user_profile_experience {
  id           Int           @id @default(autoincrement())
  title        String
  company_name String
  location     String
  description  String
  start_date   DateTime      @db.Date
  end_date     DateTime?     @db.Date
  profile_id   Int?
  user_profile user_profile? @relation(fields: [profile_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_profile_id")
}

model user_profile_project {
  id                   Int                    @id @default(autoincrement())
  plot_title           String
  synopsis             String
  logline              String
  type                 String
  hook                 String
  similar_works        String
  profile_id           Int?
  project_projectgenre project_projectgenre[]
  project_projecttag   project_projecttag[]
  user_profile         user_profile?          @relation(fields: [profile_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_profile_id")
}

model users {
  id            Int            @id @default(autoincrement())
  name          String?        @db.VarChar(255)
  email         String?        @db.VarChar(255)
  emailVerified DateTime?      @db.Timestamptz(6)
  image         String?
  company_user  company_user[]
  post          post[]
  post_like     post_like[]
  user_profile  user_profile[]
}

model verification_token {
  identifier String
  expires    DateTime @db.Timestamptz(6)
  token      String

  @@id([identifier, token])
}
